Description: >
  Kennedy Sitati / Deploy a High-Availability Web App using CloudFormation
  This template consist of the setting up servers part which deploys a security groups for servers and load
  balancer. The launch configuration which specifies server type, load balancer for distribution of traffic
  and autoscaling group for the servers.

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

Resources:
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update -y
          sudo apt-get install apache2 -y
          sudo systemctl start apache2.service
          cd /var/www/html
          echo "Creating a web app, It works " > index.html
      ImageId: ami-005de95e8ff495156
      SecurityGroups:
        - !Ref WebServerSecGroup
      InstanceType: t3.medium
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: 20

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub ${EnvironmentName}-PRIV1-SN
        - Fn::ImportValue: !Sub ${EnvironmentName}-PRIV2-SN
      LaunchConfigurationName: !Ref WebAppLaunchConfig
      MinSize: "4"
      MaxSize: "6"
      TargetGroupARNs:
        - !Ref WebAppTargetGroup

  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub ${EnvironmentName}-PUB1-SN
        - Fn::ImportValue: !Sub ${EnvironmentName}-PUB2-SN
      SecurityGroups:
        - !Ref LBSecGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
      LoadBalancerArn: !Ref WebAppLB
      Port: 80
      Protocol: HTTP

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref "WebAppTargetGroup"
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref "Listener"
      Priority: 1

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"

Outputs:
  AppLBUrl:
    Description: The url for load balancer in public subnets.
    Value: !Join ["", ["http://", !GetAtt WebAppLB.DNSName]]
    Export:
      Name: App-LB-URL
